- Rename package to parallelize. Main end user function is
  parallelize::parallelize(). So users only have to remember one thing.
  Otherwise it could be autoParallel::autoParallel, but I don't want a
  package name in CamelCase.
- Return expression objects rather than text


Fri Jun  8 12:00:36 PDT 2018

Talking with Duncan has gotten me to think more deeply about what kind of
object oriented system I want to use. S3 is simpler while S4 is more
complex. But I don't understand either of them, because this passing
default arguments has got me confused. Do any R S3 methods use default
arguments?

Conceptually there are 3 important objects: TaskGraph, Schedule,
GeneratedCode

I would like to have these features right now:

- methods to create a TaskGraph from different inputs
- plot methods for TaskGraph
- Allow user to define their own code_generator function to dispatch on
  Schedule and return object of GeneratedCode
- The flexibility to add arbitrary elements to classes

In the future I might like to have these features:

- summary, print, and more plot methods
- ways to describe data and systems so that these feed into the scheduling
- object validation for Schedule objects, because one can
create schedules that aren't valid (which implies problems with the
schedule generator)


# TODO

Before release on CRAN:

- OO methods as discussed in code review
- Read templates when necessary.
- Simplify `write_hive_scripts()` to do less. The burden should be on the
  users to write the SQL.

Less urgent:

- preprocessing step
- Alternative scheduling algorithm and code generator based on fork / join.
- Measure CPU utilization during timings to see what's parallel / threaded.


## Done

- Show a realistic script as an example that actually benefits from task parallelism.
- Vignettes.
- Robust test for expression equality
- Write the `data_parallel()` function, including modification of for loops
  into parallel code.
- Handle assignment inside of a for loop of the form `x[[i]] = ...`
