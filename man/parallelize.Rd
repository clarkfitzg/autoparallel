% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallelize.R
\name{parallelize}
\alias{parallelize}
\title{Parallelized Data Evaluater}
\usage{
parallelize(x, cl = parallel::makeCluster(spec, ...), spec = 2L, ...)
}
\arguments{
\item{x}{An object one wants to perform parallel analysis on}

\item{cl}{SNOW cluster}

\item{spec}{number of workers, see \code{\link[parallel]{makeCluster}}}

\item{...}{additional arguments to \code{\link[parallel]{makeCluster}}}
}
\value{
closure works similarly as \code{eval}
}
\description{
Distributes data over a cluster and returns a closure capable of
evaluating code in parallel. Designed for interactive use.
}
\details{
The current version sends all the global functions to the parallel
workers each time the evaluator is called. This is useful when
iteratively building functions within the global environment.
The smarter thing to do is keep track of which functions change, and
then send those over. But it's not clear that is worth it.
}
\examples{
x = list(letters, 1:10)
do = parallelize("x")
do(lapply(x, head))
}
