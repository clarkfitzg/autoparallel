% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeParallel.R
\name{makeParallel}
\alias{makeParallel}
\title{Make Parallel Code From Serial}
\usage{
makeParallel(code, isFile = file.exists(code), expr = if (isFile)
  parse(code, keep.source = TRUE) else parse(text = code, keep.source =
  FALSE), data = list(), nWorkers = parallel::detectCores(),
  platform = Platform(nWorkers = nWorkers), graph = inferGraph(expr),
  run = FALSE, scheduler = schedule, ..., generator = generate,
  generatorArgs = list(), outFile = FALSE, prefix = "gen_",
  overWrite = FALSE)
}
\arguments{
\item{code}{file name or a string containing code to be parsed}

\item{isFile}{logical, is the code a file name?}

\item{expr}{expression, for example from \code{\link[base]{parse}}}

\item{data}{list of data descriptions. 
Each element is a \linkS4class{DataSource}.
The names of the list elements correspond to the variables in the code that these objects are bound to.}

\item{nWorkers}{integer, number of parallel workers}

\item{platform}{\linkS4class{Platform} describing resource to compute on}

\item{graph}{\linkS4class{TaskGraph}, code dependency graph}

\item{run}{logical, evaluate the code once to gather timings?}

\item{scheduler, }{function to produce a \linkS4class{Schedule}
from a \linkS4class{TaskGraph}.}

\item{...}{additional arguments to schedule methods}

\item{generator}{function to produce \linkS4class{GeneratedCode} from a \linkS4class{Schedule}}

\item{generatorArgs}{list of named arguments to use with
\code{generator}}

\item{outFile}{character name of the file to write the generated script. 
If FALSE then don't write anything to disk.
If TRUE and code comes from a file then use \code{prefix} to make a new
name and write a script.}

\item{prefix}{character added to front of file name}

\item{overWrite}{logical write over existing generated file}
}
\value{
code object of class \linkS4class{GeneratedCode}
}
\description{
\code{makeParallel} is a high level function that performs all the steps
to generate parallel code.
}
\details{
The following are the high level steps:

\enumerate{
 \item Infer the task graph
 \item Schedule the statements
 \item Generate parallel code
}

The arguments allow the user to control every aspect of this process.
For more details see \code{vignette("makeParallel-concepts")}.
}
\examples{
# Make an existing R script parallel
script <- system.file("examples/mp_example.R", package = "makeParallel")
makeParallel(script)

# Write generated code to a new file
newfile <- tempfile()
makeParallel(script, file = newfile)

# Clean up
unlink(newfile)

# Pass in code directly
d <- makeParallel(expr = parse(text = "lapply(mtcars, mean)"))

# Examine generated code
writeCode(d)

# Specify a different scheduler
pcode <- makeParallel("x <- 1:100
y <- rep(1, 100)
z <- x + y", scheduler = scheduleTaskList)

# Some schedules have plotting methods
plot(schedule(pcode))
}
