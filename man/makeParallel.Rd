% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeParallel.R
\name{makeParallel}
\alias{makeParallel}
\title{Make Parallel Code From Serial}
\usage{
makeParallel(code, graph = inferGraph(code), run = FALSE,
  scheduler = schedule, ..., generator = generate, generatorArgs = list(),
  file = FALSE, prefix = "gen_", overWrite = FALSE)
}
\arguments{
\item{code}{file name or expression from \code{\link[base]{parse}}}

\item{graph}{object of class \linkS4class{DependGraph}}

\item{run}{logical, evaluate the code once to gather timings?}

\item{scheduler, }{function to produce a \linkS4class{Schedule}
from a \linkS4class{DependGraph}.}

\item{..., }{additional arguments to scheduler}

\item{generator}{function to produce \linkS4class{GeneratedCode} from a \linkS4class{Schedule}}

\item{generatorArgs}{list of named arguments to use with
\code{generator}}

\item{file}{character name of the file to write the generated script. 
If FALSE then don't write anything to disk.
If TRUE and code comes from a file then use \code{prefix} to make a new
name and write a script.}

\item{prefix}{character added to front of file name}

\item{overWrite}{logical write over existing generated file}
}
\value{
code object of class \linkS4class{GeneratedCode}
}
\description{
\code{makeParallel} is a high level function that performs all the steps
to generate parallel code, namely:
}
\details{
\enumerate{
 \item Infer the task graph
 \item Schedule the statements
 \item Generate parallel code
}

The arguments allow the user to control every aspect of this process.
For more details see \code{vignette("makeParallel-concepts")}.
}
\examples{
# Try running this on an existing R script to create "gen_script.R"
\dontrun{makeParallel("script.R")}

# All the defaults
d <- makeParallel(parse(text = "lapply(mtcars, mean)"))
writeCode(d)

# Select a different scheduling function
pcode <- makeParallel(parse(text = "x <- 1:100
y <- rep(1, 100)
z <- x + y"), scheduler = scheduleTaskList)

plot(schedule(pcode))
}
